//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `gray`.
    static let gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "gray")
    /// Color `green`.
    static let green = Rswift.ColorResource(bundle: R.hostingBundle, name: "green")
    /// Color `inkDark`.
    static let inkDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "inkDark")
    /// Color `lightBlue`.
    static let lightBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightBlue")
    /// Color `lightGray`.
    static let lightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "lightGray")
    /// Color `orange`.
    static let orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange")
    /// Color `red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "red")
    /// Color `textFieldBorder`.
    static let textFieldBorder = Rswift.ColorResource(bundle: R.hostingBundle, name: "textFieldBorder")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "inkDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func inkDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.inkDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textFieldBorder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "inkDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func inkDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.inkDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lightGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textFieldBorder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldBorder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldBorder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Rubik-Bold.ttf`.
    static let rubikBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Bold", pathExtension: "ttf")
    /// Resource file `Rubik-Medium.ttf`.
    static let rubikMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Medium", pathExtension: "ttf")
    /// Resource file `Rubik-Regular.ttf`.
    static let rubikRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Rubik-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "Rubik-Bold", withExtension: "ttf")`
    static func rubikBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Medium", withExtension: "ttf")`
    static func rubikMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Rubik-Regular", withExtension: "ttf")`
    static func rubikRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rubikRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Rubik-Bold`.
    static let rubikBold = Rswift.FontResource(fontName: "Rubik-Bold")
    /// Font `Rubik-Medium`.
    static let rubikMedium = Rswift.FontResource(fontName: "Rubik-Medium")
    /// Font `Rubik-Regular`.
    static let rubikRegular = Rswift.FontResource(fontName: "Rubik-Regular")

    /// `UIFont(name: "Rubik-Bold", size: ...)`
    static func rubikBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikBold, size: size)
    }

    /// `UIFont(name: "Rubik-Medium", size: ...)`
    static func rubikMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikMedium, size: size)
    }

    /// `UIFont(name: "Rubik-Regular", size: ...)`
    static func rubikRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: rubikRegular, size: size)
    }

    static func validate() throws {
      if R.font.rubikBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Bold' could not be loaded, is 'Rubik-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Medium' could not be loaded, is 'Rubik-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.rubikRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Rubik-Regular' could not be loaded, is 'Rubik-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `closedEye`.
    static let closedEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "closedEye")
    /// Image `currentPageImage`.
    static let currentPageImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "currentPageImage")
    /// Image `dictionaryIcon`.
    static let dictionaryIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "dictionaryIcon")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `onboardingFirst`.
    static let onboardingFirst = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingFirst")
    /// Image `onboardingSecond`.
    static let onboardingSecond = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingSecond")
    /// Image `onboardingThird`.
    static let onboardingThird = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingThird")
    /// Image `otherPagesImage`.
    static let otherPagesImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "otherPagesImage")
    /// Image `plug`.
    static let plug = Rswift.ImageResource(bundle: R.hostingBundle, name: "plug")
    /// Image `searchIcon`.
    static let searchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchIcon")
    /// Image `signUpImage`.
    static let signUpImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "signUpImage")
    /// Image `splashScreenGirl`.
    static let splashScreenGirl = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashScreenGirl")
    /// Image `trainingFinished`.
    static let trainingFinished = Rswift.ImageResource(bundle: R.hostingBundle, name: "trainingFinished")
    /// Image `trainingIcon`.
    static let trainingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "trainingIcon")
    /// Image `videoIcon`.
    static let videoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "videoIcon")
    /// Image `volume`.
    static let volume = Rswift.ImageResource(bundle: R.hostingBundle, name: "volume")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closedEye", bundle: ..., traitCollection: ...)`
    static func closedEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closedEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "currentPageImage", bundle: ..., traitCollection: ...)`
    static func currentPageImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentPageImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dictionaryIcon", bundle: ..., traitCollection: ...)`
    static func dictionaryIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dictionaryIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingFirst", bundle: ..., traitCollection: ...)`
    static func onboardingFirst(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingFirst, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingSecond", bundle: ..., traitCollection: ...)`
    static func onboardingSecond(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingSecond, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingThird", bundle: ..., traitCollection: ...)`
    static func onboardingThird(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingThird, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "otherPagesImage", bundle: ..., traitCollection: ...)`
    static func otherPagesImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.otherPagesImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plug", bundle: ..., traitCollection: ...)`
    static func plug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchIcon", bundle: ..., traitCollection: ...)`
    static func searchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signUpImage", bundle: ..., traitCollection: ...)`
    static func signUpImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUpImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splashScreenGirl", bundle: ..., traitCollection: ...)`
    static func splashScreenGirl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashScreenGirl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trainingFinished", bundle: ..., traitCollection: ...)`
    static func trainingFinished(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trainingFinished, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trainingIcon", bundle: ..., traitCollection: ...)`
    static func trainingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trainingIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "videoIcon", bundle: ..., traitCollection: ...)`
    static func videoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.videoIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "volume", bundle: ..., traitCollection: ...)`
    static func volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.volume, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.dictionary` struct is generated, and contains static references to 3 localization keys.
    struct dictionary {
      /// Value: Add to Dictionary
      static let addToDictionary = Rswift.StringResource(key: "addToDictionary", tableName: "Dictionary", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Input something to find it in dictionary
      static let placeholderSubtitle = Rswift.StringResource(key: "placeholderSubtitle", tableName: "Dictionary", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No word
      static let placeholderTitle = Rswift.StringResource(key: "placeholderTitle", tableName: "Dictionary", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Add to Dictionary
      static func addToDictionary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addToDictionary", tableName: "Dictionary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Dictionary", preferredLanguages: preferredLanguages) else {
          return "addToDictionary"
        }

        return NSLocalizedString("addToDictionary", tableName: "Dictionary", bundle: bundle, comment: "")
      }

      /// Value: Input something to find it in dictionary
      static func placeholderSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholderSubtitle", tableName: "Dictionary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Dictionary", preferredLanguages: preferredLanguages) else {
          return "placeholderSubtitle"
        }

        return NSLocalizedString("placeholderSubtitle", tableName: "Dictionary", bundle: bundle, comment: "")
      }

      /// Value: No word
      static func placeholderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholderTitle", tableName: "Dictionary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Dictionary", preferredLanguages: preferredLanguages) else {
          return "placeholderTitle"
        }

        return NSLocalizedString("placeholderTitle", tableName: "Dictionary", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 21 localization keys.
    struct localizable {
      /// en translation: Coming Soon...
      ///
      /// Locales: en
      static let comingSoon = Rswift.StringResource(key: "comingSoon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create your account
      ///
      /// Locales: en
      static let signUpTopicSubtitle = Rswift.StringResource(key: "signUpTopicSubtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dictionary
      ///
      /// Locales: en
      static let dictionaryTabTitle = Rswift.StringResource(key: "dictionaryTabTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dictionary is empty. Add words to Dictionary
      ///
      /// Locales: en
      static let emptyDictionary = Rswift.StringResource(key: "emptyDictionary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: E-mail
      ///
      /// Locales: en
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email should have @
      ///
      /// Locales: en
      static let emailValidation = Rswift.StringResource(key: "emailValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Index out of range
      ///
      /// Locales: en
      static let indexOutOfRange = Rswift.StringResource(key: "indexOutOfRange", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Let's Start
      ///
      /// Locales: en
      static let letsStart = Rswift.StringResource(key: "letsStart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Name should be greater then 6 characters
      ///
      /// Locales: en
      static let nameValidation = Rswift.StringResource(key: "nameValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No such word in repository
      ///
      /// Locales: en
      static let noSuchWordInRepository = Rswift.StringResource(key: "noSuchWordInRepository", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      static let ok = Rswift.StringResource(key: "ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password should be greater then 6 characters
      ///
      /// Locales: en
      static let passwordValidation = Rswift.StringResource(key: "passwordValidation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign up
      ///
      /// Locales: en
      static let signUp = Rswift.StringResource(key: "signUp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en
      static let skip = Rswift.StringResource(key: "skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: There are empty fields. Please fill it with data
      ///
      /// Locales: en
      static let emptyFields = Rswift.StringResource(key: "emptyFields", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Training
      ///
      /// Locales: en
      static let trainingTabTitle = Rswift.StringResource(key: "trainingTabTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Video
      ///
      /// Locales: en
      static let videoTabTitle = Rswift.StringResource(key: "videoTabTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Word is already in dictionary
      ///
      /// Locales: en
      static let alreadyInRepository = Rswift.StringResource(key: "alreadyInRepository", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Coming Soon...
      ///
      /// Locales: en
      static func comingSoon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("comingSoon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "comingSoon"
        }

        return NSLocalizedString("comingSoon", bundle: bundle, comment: "")
      }

      /// en translation: Create your account
      ///
      /// Locales: en
      static func signUpTopicSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUpTopicSubtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUpTopicSubtitle"
        }

        return NSLocalizedString("signUpTopicSubtitle", bundle: bundle, comment: "")
      }

      /// en translation: Dictionary
      ///
      /// Locales: en
      static func dictionaryTabTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dictionaryTabTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dictionaryTabTitle"
        }

        return NSLocalizedString("dictionaryTabTitle", bundle: bundle, comment: "")
      }

      /// en translation: Dictionary is empty. Add words to Dictionary
      ///
      /// Locales: en
      static func emptyDictionary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyDictionary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyDictionary"
        }

        return NSLocalizedString("emptyDictionary", bundle: bundle, comment: "")
      }

      /// en translation: E-mail
      ///
      /// Locales: en
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// en translation: Email should have @
      ///
      /// Locales: en
      static func emailValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emailValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emailValidation"
        }

        return NSLocalizedString("emailValidation", bundle: bundle, comment: "")
      }

      /// en translation: Index out of range
      ///
      /// Locales: en
      static func indexOutOfRange(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("indexOutOfRange", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "indexOutOfRange"
        }

        return NSLocalizedString("indexOutOfRange", bundle: bundle, comment: "")
      }

      /// en translation: Let's Start
      ///
      /// Locales: en
      static func letsStart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("letsStart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "letsStart"
        }

        return NSLocalizedString("letsStart", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, comment: "")
      }

      /// en translation: Name should be greater then 6 characters
      ///
      /// Locales: en
      static func nameValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nameValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nameValidation"
        }

        return NSLocalizedString("nameValidation", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "next"
        }

        return NSLocalizedString("next", bundle: bundle, comment: "")
      }

      /// en translation: No such word in repository
      ///
      /// Locales: en
      static func noSuchWordInRepository(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noSuchWordInRepository", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noSuchWordInRepository"
        }

        return NSLocalizedString("noSuchWordInRepository", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ok"
        }

        return NSLocalizedString("ok", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// en translation: Password should be greater then 6 characters
      ///
      /// Locales: en
      static func passwordValidation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("passwordValidation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "passwordValidation"
        }

        return NSLocalizedString("passwordValidation", bundle: bundle, comment: "")
      }

      /// en translation: Sign up
      ///
      /// Locales: en
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signUp"
        }

        return NSLocalizedString("signUp", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en
      static func skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "skip"
        }

        return NSLocalizedString("skip", bundle: bundle, comment: "")
      }

      /// en translation: There are empty fields. Please fill it with data
      ///
      /// Locales: en
      static func emptyFields(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("emptyFields", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "emptyFields"
        }

        return NSLocalizedString("emptyFields", bundle: bundle, comment: "")
      }

      /// en translation: Training
      ///
      /// Locales: en
      static func trainingTabTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("trainingTabTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "trainingTabTitle"
        }

        return NSLocalizedString("trainingTabTitle", bundle: bundle, comment: "")
      }

      /// en translation: Video
      ///
      /// Locales: en
      static func videoTabTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("videoTabTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "videoTabTitle"
        }

        return NSLocalizedString("videoTabTitle", bundle: bundle, comment: "")
      }

      /// en translation: Word is already in dictionary
      ///
      /// Locales: en
      static func alreadyInRepository(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alreadyInRepository", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alreadyInRepository"
        }

        return NSLocalizedString("alreadyInRepository", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.onboarding` struct is generated, and contains static references to 6 localization keys.
    struct onboarding {
      /// Value: Find a course for you
      static let secondTitle = Rswift.StringResource(key: "secondTitle", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Improve your skills
      static let thirdTitle = Rswift.StringResource(key: "thirdTitle", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Learn anytime and anywhere
      static let firstTitle = Rswift.StringResource(key: "firstTitle", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Quarantine is the perfect time to spend your day learning something new, from anywhere!
      static let firstSubtitle = Rswift.StringResource(key: "firstSubtitle", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Quarantine is the perfect time to spend your day learning something new, from anywhere!
      static let secondSubtitle = Rswift.StringResource(key: "secondSubtitle", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Quarantine is the perfect time to spend your day learning something new, from anywhere!
      static let thirdSubtitle = Rswift.StringResource(key: "thirdSubtitle", tableName: "Onboarding", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Find a course for you
      static func secondTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("secondTitle", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "secondTitle"
        }

        return NSLocalizedString("secondTitle", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: Improve your skills
      static func thirdTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thirdTitle", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "thirdTitle"
        }

        return NSLocalizedString("thirdTitle", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: Learn anytime and anywhere
      static func firstTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstTitle", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "firstTitle"
        }

        return NSLocalizedString("firstTitle", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: Quarantine is the perfect time to spend your day learning something new, from anywhere!
      static func firstSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstSubtitle", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "firstSubtitle"
        }

        return NSLocalizedString("firstSubtitle", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: Quarantine is the perfect time to spend your day learning something new, from anywhere!
      static func secondSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("secondSubtitle", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "secondSubtitle"
        }

        return NSLocalizedString("secondSubtitle", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      /// Value: Quarantine is the perfect time to spend your day learning something new, from anywhere!
      static func thirdSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thirdSubtitle", tableName: "Onboarding", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Onboarding", preferredLanguages: preferredLanguages) else {
          return "thirdSubtitle"
        }

        return NSLocalizedString("thirdSubtitle", tableName: "Onboarding", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.training` struct is generated, and contains static references to 6 localization keys.
    struct training {
      /// Value:  word in your Dictionary.  Start the Training?
      static let lastPartOneWord = Rswift.StringResource(key: "lastPartOneWord", tableName: "Training", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  words in your Dictionary.  Start the Training?
      static let lastPartManyWords = Rswift.StringResource(key: "lastPartManyWords", tableName: "Training", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add words to Dictionary
      static let placeholder = Rswift.StringResource(key: "placeholder", tableName: "Training", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Start
      static let startButtonTitle = Rswift.StringResource(key: "startButtonTitle", tableName: "Training", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There are 
      static let firstPartManyWords = Rswift.StringResource(key: "firstPartManyWords", tableName: "Training", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There is 
      static let firstPartOneWord = Rswift.StringResource(key: "firstPartOneWord", tableName: "Training", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value:  word in your Dictionary.  Start the Training?
      static func lastPartOneWord(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastPartOneWord", tableName: "Training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Training", preferredLanguages: preferredLanguages) else {
          return "lastPartOneWord"
        }

        return NSLocalizedString("lastPartOneWord", tableName: "Training", bundle: bundle, comment: "")
      }

      /// Value:  words in your Dictionary.  Start the Training?
      static func lastPartManyWords(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lastPartManyWords", tableName: "Training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Training", preferredLanguages: preferredLanguages) else {
          return "lastPartManyWords"
        }

        return NSLocalizedString("lastPartManyWords", tableName: "Training", bundle: bundle, comment: "")
      }

      /// Value: Add words to Dictionary
      static func placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder", tableName: "Training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Training", preferredLanguages: preferredLanguages) else {
          return "placeholder"
        }

        return NSLocalizedString("placeholder", tableName: "Training", bundle: bundle, comment: "")
      }

      /// Value: Start
      static func startButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("startButtonTitle", tableName: "Training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Training", preferredLanguages: preferredLanguages) else {
          return "startButtonTitle"
        }

        return NSLocalizedString("startButtonTitle", tableName: "Training", bundle: bundle, comment: "")
      }

      /// Value: There are 
      static func firstPartManyWords(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstPartManyWords", tableName: "Training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Training", preferredLanguages: preferredLanguages) else {
          return "firstPartManyWords"
        }

        return NSLocalizedString("firstPartManyWords", tableName: "Training", bundle: bundle, comment: "")
      }

      /// Value: There is 
      static func firstPartOneWord(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("firstPartOneWord", tableName: "Training", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Training", preferredLanguages: preferredLanguages) else {
          return "firstPartOneWord"
        }

        return NSLocalizedString("firstPartOneWord", tableName: "Training", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "splashScreenGirl", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashScreenGirl' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "inkDark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'inkDark' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
